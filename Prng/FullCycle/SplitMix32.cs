// Decompiled with JetBrains decompiler
// Type: Penguin.Random.Prng.FullCycle.Xoroshiro64
// Assembly: Penguin.Random, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4A5518E0-DEF6-4913-9205-059E59B1CA91
// Assembly location: C:\Git\MassageEnvy.com Umbraco 8\MassageEnvy\bin\Penguin.Random.dll

using Penguin.Random.Interfaces;
using System;

namespace Penguin.Random.Prng.FullCycle
{
    /// <summary>And implementation of a Xoroshiro64 RNG</summary>
    public class SplitMix32 : IRandomGenerator<uint>
    {
        private uint _seed;

        /// <summary>
        /// Creates an instance of this RNG using the given state as the starting point
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Security", "CA5394:Do not use insecure randomness", Justification = "<Pending>")]
        public SplitMix32()
        {
            System.Random r = new();

            _seed = unchecked((uint)r.Next());
        }

        /// <summary>
        /// Creates an instance of this RNG using the given state as the starting point
        /// </summary>
        /// <param name="state"></param>
        public SplitMix32(State state)
        {
            if (state is null)
            {
                throw new ArgumentNullException(nameof(state));
            }

            _seed = state._seed;
        }

        /// <summary>
        /// Creates an instance of this RNG using the given state as the starting point
        /// </summary>
        public SplitMix32(uint seed)
        {
            _seed = seed;
        }

        /// <summary>
        /// Returns the current machine state so it can be persisted and loaded
        /// </summary>
        /// <returns>The current Machine state</returns>
        public SplitMix32.State GetState()
        {
            return new SplitMix32.State()
            {
                _seed = _seed,
            };
        }

        /// <summary>Get the next ulong for this instance.</summary>
        /// <returns>Next psuedo-random value.</returns>
        public uint Next()
        {
            uint z = _seed += 0x9e3779b9;
            z ^= z >> 15; // 16 for murmur3
            z *= 0x85ebca6b;
            z ^= z >> 13;
            z *= 0xc2b2ae3d; // 0xc2b2ae35 for murmur3
            return z ^= z >> 16;
        }

        /// <summary>Get the next ulong for this instance.</summary>
        /// <returns>Next psuedo-random value.</returns>
        public uint Next(uint min, uint max)
        {
            uint z = Next();

            while (z < min || z >= max)
            {
                z = Next();
            }

            return z;
        }

        /// <summary>
        /// Returns the next double from the sequence generated by taking the state and dividing it by ulong.MaxValue
        /// </summary>
        /// <returns>The next double from the sequence created from the next ulong</returns>
        public double NextDouble()
        {
            return Next() / uint.MaxValue;
        }

        /// <summary>The previous machine state used for saving/loading</summary>
        public class State
        {
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
            public uint _seed;
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
        }
    }
}